version: "3.8"

x-common:
  database:
    &db-environment
    POSTGRES_USER: &db-user ${POSTGRES_USER}
    POSTGRES_PASSWORD: &db-pass ${POSTGRES_PASSWORD}
    PGDATA: "/var/lib/postgresql/data/pgdata"
  loki:
    &loki-environment
    MINIO_ACCESS_KEY: &minio-ak ${MINIO_ACCESS_KEY}
    MINIO_SECRET_KEY: &minio-sk ${MINIO_SECRET_KEY}
    CASSANDRA_USER: &cass-user ${CASSANDRA_USER}
    CASSANDRA_PASSWORD: &cass-pass ${CASSANDRA_PASSWORD}
    CONSUL_API_KEY: &consul-key ${CONSUL_API_KEY}
    REDIS_PASSWORD: &redis-pass ${REDIS_PASSWORD}
    TZ: &time-zone ${CONTAINER_TZ}

services:
  promtail:
    image: grafana/promtail:2.7.5
    container_name: promtail
    restart: always
    command: -config.file=/etc/promtail/config.yml -config.expand-env=true
    environment:
      TZ: *time-zone
      HOST_SERVER_NAME: ${HOST_SERVER_NAME}
    volumes:
      - /var/log:/var/log:ro
      - ./tail.yaml:/etc/promtail/config.yml
    networks:
      - monitoring
    depends_on:
      - loki
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"

  loki:
    image: grafana/loki:2.7.5
    container_name: loki
    restart: always
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml -target=all,table-manager -config.expand-env=true
    environment:
      <<: *loki-environment
    volumes:
      - ./loki.yaml:/etc/loki/local-config.yaml:ro
      - ./loki-rules.yaml:/etc/loki/rules/fake/rules.yaml:ro
    networks:
      - monitoring
    depends_on:
      - minio
      - cassandra
      - consul
      - redis
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"

  minio:
    image: minio/minio:latest
    container_name: minio
    restart: always
    entrypoint: sh
    command: -c 'mkdir -p /export/loki && /opt/bin/minio server /export'
    environment:
      TZ: *time-zone
      MINIO_ACCESS_KEY: *minio-ak
      MINIO_SECRET_KEY: *minio-sk
    volumes:
      - minio:/export
    networks:
      - monitoring
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"

  cassandra:
    image: bitnami/cassandra:latest
    container_name: cassandra
    restart: always
    environment:
      TZ: *time-zone
      CASSANDRA_PASSWORD_SEEDER: "yes"
      CASSANDRA_USER: *cass-user
      CASSANDRA_PASSWORD: *cass-pass
    volumes:
      - cassandra:/bitnami
    networks:
      - monitoring
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"

  consul:
    image: hashicorp/consul:latest
    container_name: consul
    restart: always
    environment:
      TZ: *time-zone
      CONSUL_API_KEY: *consul-key
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /consul/config/server.json
        {
          "node_name": "consul",
          "server": true,
          "ui_config": {
              "enabled" : true
          },
          "data_dir": "/consul/data",
          "addresses": {
              "http" : "0.0.0.0"
          },
          "acl": { 
              "enabled": true,
              "default_policy": "deny",
              "enable_token_persistence": true,
              "tokens": {
                  "initial_management": "$CONSUL_API_KEY",
                  "agent": "$CONSUL_API_KEY"
              }
          },
          "log_level": "info"
        }
        EOF
        /usr/local/bin/docker-entrypoint.sh agent -dev -client 0.0.0.0 -config-file=/consul/config/server.json
    volumes:
      - consul:/consul/data
    networks:
      - monitoring
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"

  redis:
    image: bitnami/redis:latest
    container_name: redis
    restart: always
    environment:
      TZ: *time-zone
      REDIS_PASSWORD: *redis-pass
    networks:
      - monitoring
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    environment:
      TZ: *time-zone
    volumes:
      - ./prom.yaml:/etc/prometheus/prometheus.yml:ro
      - ./prom-rules.yaml:/etc/prometheus/rules.yml:ro
      - prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"
  
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: always
    environment:
      TZ: *time-zone
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - monitoring
    depends_on:
      - prometheus
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.1
    container_name: cadvisor
    restart: always
    environment:
      TZ: *time-zone
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - monitoring
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: always
    environment:
      TZ: *time-zone
    volumes:
      - ./alert.yaml:/etc/alertmanager/config.yml:ro
      - alertmanager:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    networks:
      - monitoring
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"

  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    environment:
      TZ: *time-zone
      <<: *db-environment
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - monitoring
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      TZ: *time-zone
      GF_PATHS_PROVISIONING: "/etc/grafana/provisioning"
      GF_DATABASE_TYPE: "postgres"
      GF_DATABASE_HOST: "postgres"
      GF_DATABASE_NAME: *db-user
      GF_DATABASE_USER: *db-user
      GF_DATABASE_PASSWORD: *db-pass
      GF_DATABASE_SSL_MODE: "disable"
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        - name: Prometheus
          type: prometheus
          access: proxy
          orgId: 1
          url: http://prometheus:9090
          basicAuth: false
          isDefault: false
          version: 1
          editable: false
        EOF
        mkdir -p /etc/grafana/provisioning/dashboards
        cat <<EOF > /etc/grafana/provisioning/dashboards/db.yaml
        apiVersion: 1
        providers:
          - name: 'Nyanmark'
            orgId: 1
            folder: 'General'
            folderUid: ''
            type: file
            disableDeletion: false
            updateIntervalSeconds: 10
            allowUiUpdates: true
            options:
              path: /var/lib/dashboards
              foldersFromFilesStructure: true
        EOF
        grafana-cli plugins install grafana-piechart-panel
        /run.sh
    volumes:
      - ./dashboards:/var/lib/dashboards
    networks:
      - monitoring
    depends_on:
      - postgres
    logging:
      driver: loki
      options:
        loki-url: "http://127.0.0.1:3100/loki/api/v1/push"

networks:
  monitoring:

volumes:
  postgres:
  prometheus:
  minio:
  cassandra:
  consul:
  alertmanager:

